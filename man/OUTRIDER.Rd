% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/OUTRIDER.R
\name{OUTRIDER}
\alias{OUTRIDER}
\title{OUTRIDER - Finding aberrant expression events}
\usage{
OUTRIDER(object, q, autoCorrect = TRUE, implementation = "edNew", ...)
}
\arguments{
\item{object}{An OutriderDataSet object containing the counts}

\item{q}{The encoding dimensions}

\item{autoCorrect}{If TRUE, the default, the raw read counts are controled 
for confounders by the autoencoder}

\item{implementation}{"R", the default, will use the R implementation or 
"python" to use the python/tensorflow experimental implementation}

\item{...}{passed on to the autoencoder implementing method. In the case of 
the R implementation it is passed to the optim function.}
}
\value{
OutriderDataSet with all the computed values. The values are stored
            as assays and can be accessed by: \code{assays(ods)[['value']]}.
            To get a full list of calculated values run:
            \code{assayNames(ods)}
}
\description{
The OUTRIDER function runs the default OUTRIDER pipline. 
Combinig the fit, the computation of z scores and P-values.
All computed values are returned as an OutriderDataSet object.

To have more control over each analysis step one can call each 
function seperatly.

\enumerate{
    \item \code{\link{estimateSizeFactors}} to calculte the sizeFactors
    \item \code{\link{autoCorrect}} to correct for confounding effects
    \item \code{\link{fit}} to fit the negative binomial model
    \item \code{\link{computePvalues}} to calculate the nominal and 
              adjusted P-values
    \item \code{\link{computeZscores}} to calculate the z scores
}
}
\examples{
ods <- makeExampleOutriderDataSet()
runAutoCorrect <- TRUE
\dontshow{
    ods <- ods[1:10,1:10]
    runAutoCorrect <- FALSE
}
ods <- OUTRIDER(ods, autoCorrect=runAutoCorrect)

assays(ods)[['pValue']][1:10,1:10]
res <- results(ods, all=TRUE)
res

plotAberrantPerSample(ods)
plotVolcano(ods, 1)

}
